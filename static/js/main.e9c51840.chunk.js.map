{"version":3,"sources":["components/SearchBar.jsx","Apis/youtube.js","components/VideoItem.jsx","components/VideoList.jsx","components/VideoDetail.jsx","App.js","serviceWorker.js","index.js"],"names":["SearchBar","state","term","onInputChange","e","setState","target","value","onFormSubmit","preventDefault","props","className","onSubmit","this","htmlFor","onChange","type","name","id","Component","axios","create","baseURL","params","part","maxResults","key","process","VideoItem","video","onVideoSelect","onClick","src","snippet","thumbnails","medium","url","alt","title","VideoList","videos","renderedList","map","videoId","VideoDetail","videoSrc","width","height","frameborder","allow","allowfullscreen","description","App","selectedVideo","onTermSubmit","a","youtube","get","q","response","data","items","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wRAIqBA,G,8NACnBC,MAAQ,CAAEC,KAAM,I,EAEhBC,cAAgB,SAACC,GACf,EAAKC,SAAS,CAAEH,KAAME,EAAEE,OAAOC,S,EAGjCC,aAAe,SAACJ,GACdA,EAAEK,iBACF,EAAKC,MAAMF,aAAa,EAAKP,MAAMC,O,uDAInC,OACE,yBAAKS,UAAU,yBACb,qCACA,0BAAMC,SAAUC,KAAKL,aAAcG,UAAU,WAC3C,yBAAKA,UAAU,SACb,2BAAOG,QAAQ,IACb,2BACEC,SAAUF,KAAKV,cACfI,MAAOM,KAAKZ,MAAMC,KAClBc,KAAK,OACLC,KAAK,GACLC,GAAG,a,GAxBoBC,c,QCCxBC,E,OAAAA,EAAMC,OAAO,CAC1BC,QAAS,wCACTC,OAAQ,CACNC,KAAM,UACNR,KAAM,QACNS,WAAY,EACZC,IARQC,6C,MCAG,SAASC,EAAT,GAA8C,IAAzBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,cACzC,OACE,yBAAKC,QAAS,kBAAMD,EAAcD,IAAQlB,UAAU,mBAClD,yBACEA,UAAU,WACVqB,IAAKH,EAAMI,QAAQC,WAAWC,OAAOC,IACrCC,IAAKR,EAAMI,QAAQK,QAErB,yBAAK3B,UAAU,WACb,yBAAKA,UAAU,UAAUkB,EAAMI,QAAQK,SCThC,SAASC,EAAT,GAA+C,IAA1BC,EAAyB,EAAzBA,OAAQV,EAAiB,EAAjBA,cACpCW,EAAeD,EAAOE,KAAI,SAACb,GAC/B,OAAO,kBAAC,EAAD,CAAWH,IAAKG,EAAMX,GAAGyB,QAASb,cAAeA,EAAeD,MAAOA,OAGhF,OAAO,yBAAKlB,UAAU,2BAA2B8B,GCNpC,SAASG,EAAT,GAAiC,IAAVf,EAAS,EAATA,MACpC,IAAKA,EACH,OAAO,yCAGT,IAAMgB,EAAQ,wCAAoChB,EAAMX,GAAGyB,SAE3D,OACE,oCACE,yBAAKhC,UAAU,YACb,4BACEmC,MAAM,MACNC,OAAO,MACPf,IAAKa,EACLG,YAAY,IACZC,MAAM,2FACNC,iBAAe,EACfZ,MAAOT,EAAMI,QAAQK,SAGzB,yBAAK3B,UAAU,cACb,wBAAIA,UAAU,aAAakB,EAAMI,QAAQK,OACzC,2BAAIT,EAAMI,QAAQkB,e,IC2BXC,E,4MA1CbnD,MAAQ,CAAEuC,OAAQ,GAAIa,cAAe,M,EAMrCC,a,uCAAe,WAAOpD,GAAP,eAAAqD,EAAA,sEACUC,EAAQC,IAAI,UAAW,CAC5ClC,OAAQ,CACNmC,EAAGxD,KAHM,OACPyD,EADO,OAMb,EAAKtD,SAAS,CACZmC,OAAQmB,EAASC,KAAKC,MACtBR,cAAeM,EAASC,KAAKC,MAAM,KARxB,2C,wDAYf/B,cAAgB,SAACD,GACf,EAAKxB,SAAS,CAAEgD,cAAexB,K,kEAhB/BhB,KAAKyC,aAAa,e,+BAqBlB,OACE,oCACE,kBAAC,EAAD,CAAW9C,aAAcK,KAAKyC,eAC9B,yBAAK3C,UAAU,WACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,sBACb,kBAACiC,EAAD,CAAaf,MAAOhB,KAAKZ,MAAMoD,iBAEjC,yBAAK1C,UAAU,qBACb,kBAAC4B,EAAD,CAAWT,cAAejB,KAAKiB,cAAeU,OAAQ3B,KAAKZ,MAAMuC,iB,GAlC7DrB,aCIE2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e9c51840.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport 'emoji-mart/css/emoji-mart.css';\nimport { Picker } from 'emoji-mart';\n\nexport default class SearchBar extends Component {\n  state = { term: '' };\n\n  onInputChange = (e) => {\n    this.setState({ term: e.target.value });\n  };\n\n  onFormSubmit = (e) => {\n    e.preventDefault();\n    this.props.onFormSubmit(this.state.term);\n  };\n\n  render() {\n    return (\n      <div className=\"search-bar ui segment\">\n        <p>search</p>\n        <form onSubmit={this.onFormSubmit} className=\"ui form\">\n          <div className=\"field\">\n            <label htmlFor=\"\">\n              <input\n                onChange={this.onInputChange}\n                value={this.state.term}\n                type=\"text\"\n                name=\"\"\n                id=\"\"\n              />\n            </label>\n          </div>\n        </form>\n        {/* <Picker\n          title=\"Pick your emojiâ€¦\"\n          emoji=\"point_up\"\n          onSelect={this.addEmoji}\n        /> */}\n      </div>\n    );\n  }\n}\n","import axios from 'axios';\n\n// const KEY = process.env.REACT_APP_API_KEY.slice(1, 40);\nconst KEY = process.env.REACT_APP_API_KEY;\n\nexport default axios.create({\n  baseURL: 'https://www.googleapis.com/youtube/v3',\n  params: {\n    part: 'snippet',\n    type: 'video',\n    maxResults: 5,\n    key: KEY,\n  },\n});\n","import React from 'react';\nimport './VideoItem.css';\n\nexport default function VideoItem({ video, onVideoSelect }) {\n  return (\n    <div onClick={() => onVideoSelect(video)} className=\"item video-item\">\n      <img\n        className=\"ui image\"\n        src={video.snippet.thumbnails.medium.url}\n        alt={video.snippet.title}\n      />\n      <div className=\"content\">\n        <div className=\"header\">{video.snippet.title}</div>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport VideoItem from './VideoItem';\n\nexport default function VideoList({ videos, onVideoSelect }) {\n  const renderedList = videos.map((video) => {\n    return <VideoItem key={video.id.videoId} onVideoSelect={onVideoSelect} video={video} />;\n  });\n\n  return <div className=\"ui relaxed divided list\">{renderedList}</div>;\n}\n","import React from 'react';\n\nexport default function VideoDetail({ video }) {\n  if (!video) {\n    return <p>Loading...</p>;\n  }\n\n  const videoSrc = `https://www.youtube.com/embed/${video.id.videoId}`;\n\n  return (\n    <>\n      <div className=\"ui embed\">\n        <iframe\n          width=\"560\"\n          height=\"315\"\n          src={videoSrc}\n          frameborder=\"0\"\n          allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n          allowfullscreen\n          title={video.snippet.title}\n        ></iframe>\n      </div>\n      <div className=\"ui segment\">\n        <h4 className=\"ui header\">{video.snippet.title}</h4>\n        <p>{video.snippet.description}</p>\n      </div>\n    </>\n  );\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport SearchBar from './components/SearchBar';\nimport youtube from './Apis/youtube';\nimport VideoList from './components/VideoList';\nimport VideoDetail from './components/VideoDetail';\n// require('dotenv').config();\n\nclass App extends Component {\n  state = { videos: [], selectedVideo: null };\n\n  componentDidMount() {\n    this.onTermSubmit('buildings');\n  }\n\n  onTermSubmit = async (term) => {\n    const response = await youtube.get('/search', {\n      params: {\n        q: term,\n      },\n    });\n    this.setState({\n      videos: response.data.items,\n      selectedVideo: response.data.items[0],\n    });\n  };\n\n  onVideoSelect = (video) => {\n    this.setState({ selectedVideo: video });\n    // console.log(video);\n  };\n\n  render() {\n    return (\n      <>\n        <SearchBar onFormSubmit={this.onTermSubmit} />\n        <div className=\"ui grid\">\n          <div className=\"ui row\">\n            <div className=\"eleven wide column\">\n              <VideoDetail video={this.state.selectedVideo} />\n            </div>\n            <div className=\"five  wide column\">\n              <VideoList onVideoSelect={this.onVideoSelect} videos={this.state.videos} />\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}